// check-system.js - System readiness check for Industrial Loading System

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('=====================================');
console.log('Industrial Loading System - System Check');
console.log('=====================================\n');

let errors = 0;
let warnings = 0;

// Check Node.js version
function checkNode() {
  console.log('🔍 Checking Node.js...');
  try {
    const nodeVersion = process.version;
    const majorVersion = parseInt(nodeVersion.split('.')[0].substring(1));
    
    if (majorVersion >= 16) {
      console.log(`✅ Node.js ${nodeVersion} is installed (minimum: v16.0.0)`);
    } else {
      console.log(`❌ Node.js ${nodeVersion} is too old. Please upgrade to v16.0.0 or higher`);
      errors++;
    }
  } catch (e) {
    console.log('❌ Could not determine Node.js version');
    errors++;
  }
}

// Check npm
function checkNpm() {
  console.log('\n🔍 Checking npm...');
  try {
    const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
    console.log(`✅ npm ${npmVersion} is installed`);
  } catch (e) {
    console.log('❌ npm is not installed or not in PATH');
    errors++;
  }
}

// Check dependencies
function checkDependencies() {
  console.log('\n🔍 Checking dependencies...');
  
  if (fs.existsSync('node_modules')) {
    console.log('✅ node_modules directory exists');
    
    // Check for key dependencies
    const keyDeps = ['react', 'react-dom', 'react-router-dom', 'typescript'];
    let missingDeps = [];
    
    keyDeps.forEach(dep => {
      if (!fs.existsSync(path.join('node_modules', dep))) {
        missingDeps.push(dep);
      }
    });
    
    if (missingDeps.length > 0) {
      console.log(`⚠️  Missing key dependencies: ${missingDeps.join(', ')}`);
      console.log('   Run: npm install');
      warnings++;
    } else {
      console.log('✅ All key dependencies are installed');
    }
  } else {
    console.log('❌ node_modules directory not found');
    console.log('   Run: npm install');
    errors++;
  }
}

// Check environment file
function checkEnvFile() {
  console.log('\n🔍 Checking environment configuration...');
  
  if (fs.existsSync('.env')) {
    console.log('✅ .env file exists');
    
    // Check key environment variables
    try {
      const envContent = fs.readFileSync('.env', 'utf8');
      const useMock = envContent.includes('REACT_APP_USE_MOCK=true');
      
      if (useMock) {
        console.log('✅ Application configured for DEMO MODE (mock data)');
      } else {
        console.log('⚠️  Application configured for PRODUCTION MODE (requires backend)');
        warnings++;
      }
    } catch (e) {
      console.log('⚠️  Could not read .env file');
      warnings++;
    }
  } else {
    console.log('⚠️  .env file not found');
    console.log('   Creating default .env for demo mode...');
    
    const defaultEnv = `# Industrial Loading System - Environment Configuration
# Generated by check-system.js

# Application Mode (true = mock data, false = real backend)
REACT_APP_USE_MOCK=true

# API Configuration
REACT_APP_API_URL=http://localhost:8000
REACT_APP_WEBSOCKET_URL=ws://localhost:8000/ws

# Application Info
REACT_APP_VERSION=1.0.0
REACT_APP_BUILD_DATE=${new Date().toISOString().split('T')[0]}

# Feature Flags
REACT_APP_ENABLE_WEBSOCKET=true
REACT_APP_ENABLE_NOTIFICATIONS=true
REACT_APP_ENABLE_ANALYTICS=false
REACT_APP_ENABLE_DEBUG_MODE=true

# Development Settings
GENERATE_SOURCEMAP=true
FAST_REFRESH=true
`;
    
    try {
      fs.writeFileSync('.env', defaultEnv);
      console.log('✅ Created .env file with demo configuration');
    } catch (e) {
      console.log('❌ Failed to create .env file');
      errors++;
    }
  }
}

// Check required files
function checkRequiredFiles() {
  console.log('\n🔍 Checking required files...');
  
  const requiredFiles = [
    'package.json',
    'tsconfig.json',
    'public/index.html',
    'src/index.tsx',
    'src/App.tsx'
  ];
  
  requiredFiles.forEach(file => {
    if (fs.existsSync(file)) {
      console.log(`✅ ${file} exists`);
    } else {
      console.log(`❌ ${file} is missing`);
      errors++;
    }
  });
}

// Check port availability
function checkPort() {
  console.log('\n🔍 Checking port 3000...');
  const net = require('net');
  
  const server = net.createServer();
  
  server.once('error', (err) => {
    if (err.code === 'EADDRINUSE') {
      console.log('⚠️  Port 3000 is already in use');
      console.log('   The app will try to use the next available port');
      warnings++;
    }
  });
  
  server.once('listening', () => {
    console.log('✅ Port 3000 is available');
    server.close();
  });
  
  server.listen(3000);
}

// Run all checks
async function runChecks() {
  checkNode();
  checkNpm();
  checkDependencies();
  checkEnvFile();
  checkRequiredFiles();
  checkPort();
  
  // Summary
  setTimeout(() => {
    console.log('\n=====================================');
    console.log('SUMMARY');
    console.log('=====================================');
    
    if (errors === 0 && warnings === 0) {
      console.log('✅ All checks passed! System is ready.');
      console.log('\nTo start the application:');
      console.log('  npm start\n');
    } else {
      if (errors > 0) {
        console.log(`❌ ${errors} error(s) found - these must be fixed`);
      }
      if (warnings > 0) {
        console.log(`⚠️  ${warnings} warning(s) found - these should be reviewed`);
      }
      
      if (errors > 0) {
        console.log('\nPlease fix the errors before starting the application.');
        process.exit(1);
      } else {
        console.log('\nThe application should run despite the warnings.');
        console.log('To start: npm start\n');
      }
    }
  }, 1000);
}

// Run checks
runChecks();