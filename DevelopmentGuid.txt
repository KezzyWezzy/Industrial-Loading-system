# Industrial Loading System - Deployment Guide

## Overview

This guide provides comprehensive instructions for deploying the Industrial Loading System frontend application in various environments.

## Prerequisites

- Node.js 16.x or higher (for building)
- Web server (Nginx, Apache, or cloud service)
- SSL certificate for HTTPS
- Access to deployment environment
- Backend API deployed and accessible

## Build Process

### 1. Environment Configuration

Create environment-specific configuration files:

```bash
# Production environment
cp .env.example .env.production
```

Update `.env.production` with production values:
```env
REACT_APP_API_URL=https://api.production.example.com
REACT_APP_WEBSOCKET_URL=wss://api.production.example.com/ws
REACT_APP_ENVIRONMENT=production
```

### 2. Install Dependencies

```bash
npm ci --production=false
# or
yarn install --frozen-lockfile
```

### 3. Build Application

```bash
# Production build
npm run build
# or
yarn build
```

This creates an optimized production build in the `build` directory.

### 4. Build Verification

```bash
# Test the production build locally
npx serve -s build
```

## Deployment Options

### Option 1: Static Web Server (Nginx)

#### Nginx Configuration

Create `/etc/nginx/sites-available/industrial-loading`:

```nginx
server {
    listen 80;
    server_name example.com;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name example.com;

    ssl_certificate /path/to/ssl/cert.pem;
    ssl_certificate_key /path/to/ssl/key.pem;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers HIGH:!aNULL:!MD5;
    ssl_prefer_server_ciphers on;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header Content-Security-Policy "default-src 'self' https:; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline';" always;
    
    root /var/www/industrial-loading;
    index index.html;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    location /static {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

#### Deployment Steps

1. Copy build files:
```bash
sudo cp -r build/* /var/www/industrial-loading/
```

2. Set permissions:
```bash
sudo chown -R www-data:www-data /var/www/industrial-loading
sudo chmod -R 755 /var/www/industrial-loading
```

3. Enable site:
```bash
sudo ln -s /etc/nginx/sites-available/industrial-loading /etc/nginx/sites-enabled/
sudo nginx -t
sudo systemctl reload nginx
```

### Option 2: Docker Deployment

#### Dockerfile

```dockerfile
# Build stage
FROM node:16-alpine as build
WORKDIR /app
COPY package*.json ./
RUN npm ci --production=false
COPY . .
RUN npm run build

# Production stage
FROM nginx:alpine
COPY --from=build /app/build /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
```

#### nginx.conf for Docker

```nginx
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;
    
    location / {
        try_files $uri $uri/ /index.html;
    }
    
    location /static {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
```

#### Build and Deploy

```bash
# Build Docker image
docker build -t industrial-loading-frontend .

# Run container
docker run -d -p 80:80 --name industrial-loading industrial-loading-frontend

# With environment variables
docker run -d -p 80:80 \
  -e REACT_APP_API_URL=https://api.example.com \
  --name industrial-loading industrial-loading-frontend
```

### Option 3: Cloud Deployment

#### AWS S3 + CloudFront

1. Create S3 bucket:
```bash
aws s3 mb s3://industrial-loading-frontend
```

2. Configure bucket for static hosting:
```bash
aws s3 website s3://industrial-loading-frontend \
  --index-document index.html \
  --error-document index.html
```

3. Deploy files:
```bash
aws s3 sync build/ s3://industrial-loading-frontend \
  --delete \
  --cache-control max-age=31536000,public \
  --exclude index.html
  
aws s3 cp build/index.html s3://industrial-loading-frontend \
  --cache-control max-age=0,no-cache,no-store,must-revalidate
```

4. Create CloudFront distribution for HTTPS and caching

#### Netlify

1. Install Netlify CLI:
```bash
npm install -g netlify-cli
```

2. Deploy:
```bash
netlify deploy --prod --dir=build
```

#### Vercel

1. Install Vercel CLI:
```bash
npm install -g vercel
```

2. Deploy:
```bash
vercel --prod
```

## Post-Deployment Tasks

### 1. Health Checks

Create a health check endpoint or monitor:
- Application loads correctly
- API connectivity works
- WebSocket connections establish
- Critical features function

### 2. Monitoring Setup

Configure monitoring tools:
- Application Performance Monitoring (APM)
- Error tracking (Sentry)
- Analytics (Google Analytics)
- Uptime monitoring

### 3. Backup Configuration

- Regular backups of configuration files
- Deployment rollback procedures
- Database backup coordination

### 4. Security Hardening

- Enable HTTPS only
- Configure CORS properly
- Set security headers
- Review CSP policies
- Enable rate limiting

## Environment-Specific Configurations

### Development
```env
REACT_APP_API_URL=http://localhost:8000
REACT_APP_ENVIRONMENT=development
REACT_APP_ENABLE_DEBUG_MODE=true
```

### Staging
```env
REACT_APP_API_URL=https://api.staging.example.com
REACT_APP_ENVIRONMENT=staging
REACT_APP_ENABLE_DEBUG_MODE=false
```

### Production
```env
REACT_APP_API_URL=https://api.example.com
REACT_APP_ENVIRONMENT=production
REACT_APP_ENABLE_DEBUG_MODE=false
```

## Rollback Procedures

### Quick Rollback

1. Keep previous build:
```bash
mv /var/www/industrial-loading /var/www/industrial-loading-backup
mv /var/www/industrial-loading-previous /var/www/industrial-loading
```

2. Docker rollback:
```bash
docker stop industrial-loading
docker run -d -p 80:80 --name industrial-loading industrial-loading-frontend:previous
```

### Version Management

Tag releases for easy rollback:
```bash
git tag -a v1.0.0 -m "Release version 1.0.0"
git push origin v1.0.0
```

## Performance Optimization

### 1. Enable Compression
- Gzip for text assets
- Brotli for modern browsers

### 2. Cache Headers
- Long cache for static assets
- No cache for index.html
- ETags for dynamic content

### 3. CDN Configuration
- Serve static assets from CDN
- Geographic distribution
- Edge caching

### 4. Bundle Optimization
- Code splitting
- Lazy loading
- Tree shaking
- Minimize bundle size

## Troubleshooting

### Common Issues

1. **404 Errors on Routes**
   - Ensure server redirects all routes to index.html
   - Check nginx try_files configuration

2. **CORS Errors**
   - Verify API CORS configuration
   - Check allowed origins include frontend URL

3. **WebSocket Connection Failures**
   - Ensure WSS protocol for HTTPS sites
   - Check firewall rules for WebSocket ports

4. **Environment Variables Not Working**
   - Variables must start with REACT_APP_
   - Rebuild after changing variables
   - Check build-time vs runtime variables

### Debug Steps

1. Check browser console for errors
2. Verify network requests in DevTools
3. Check server logs
4. Test API endpoints independently
5. Verify SSL certificate validity

## Maintenance

### Regular Tasks
- Security updates (monthly)
- Dependency updates (quarterly)
- Performance audits (quarterly)
- Backup verification (weekly)

### Update Procedures
1. Test updates in staging
2. Schedule maintenance window
3. Backup current deployment
4. Deploy updates
5. Verify functionality
6. Monitor for issues

## Contact Information

- DevOps Team: devops@example.com
- Emergency: +1-555-0123
- Documentation: https://docs.example.com

---

Last Updated: 2024-03-01
Version: 1.0.0